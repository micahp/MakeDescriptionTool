import wx, re, textwrap, os.path
from PIL import ImageFont, Image, ImageDraw

# SETUP
imgWidth, imgHeight = 2560, 1600

# Space ratio percentages
description_p, contributor_p = .6, .4
font_size = imgHeight / 10

# Get file for font
dir = os.path.dirname(__file__) 
font_file = dir + '/avenir-light.ttf'

font = ImageFont.truetype(font_file, font_size)
img = Image.new("RGB", (imgWidth, imgHeight), (30,30,30))

# Borders/margins
margin = imgHeight / 16
right_margin = margin * 2

# Space between description and contributors
padding = margin / 2

# Justification for character limits with 2560x1600 resolution
# 
# max description + collaborators height = 1400
# 
# description to contributors vertical space ratio = 3:2
# description = 960 pixel height max
# contributors = 640 pixel height max
# 
# Description
# average width of letter = 64
# max characters per line based on average = 35
# line height = 180
# max number of lines = 5
# max characters for description = 175
# 
# Contributors
# average width of letter = 48
# characters per line = 47
# line height = 138
# max number of lines = 2.5, rounded up to 3
# max characters for contributors = 141

# Get draw module to draw text onto black background
draw = ImageDraw.Draw(img)

# GET DESCRIPTION W/ ERROR CHECKING
description = raw_input('Enter project description (175 character max): \n')

# Check how tall lines will be, if pixels greater than 60% height minus margins, re-do
description_line_height_count = 0
for line in textwrap.wrap(description, width = imgWidth):
    wraparound_factor = draw.textsize(line, font=font)[0] // (imgWidth - margin - right_margin)
    if draw.textsize(line, font=font)[0] % (imgWidth - margin - right_margin) > 0:
	wraparound_factor += 1
    description_line_height_count += draw.textsize(line, font=font)[1] * wraparound_factor
while description_line_height_count > imgHeight * description_p:
    description = raw_input('Enter project description (175 character max): \n')
    description_line_height_count = 0
    for line in textwrap.wrap(description, width = imgWidth):
        wraparound_factor = draw.textsize(line, font=font)[0] // (imgWidth - margin - right_margin)
        description_line_height_count += draw.textsize(line, font=font)[1] * wraparound_factor

# GET CONTRIBUTORS WITH ERROR CHECKING
font_size = imgHeight / 16
num_contributors = raw_input('Enter the number of contributors: \n')
while not re.match("^[0-9]*$", num_contributors):
    num_contributors = raw_input('Enter the number of contributors: \n')
num_contributors = int(num_contributors)
contributors = []
contributor_line_height_count = 0
pos = 0
while (pos < num_contributors):
    contributor = raw_input('Enter contributor ' + str(pos + 1) + ' and comma separated institution (47 character max):\n')	
    while draw.textsize(contributor, font=font)[0] > (imgWidth - margin - right_margin):
	contributor = raw_input('Enter contributor ' + str(pos + 1) + ' and comma separated institution (47 character max):\n')
    contributor_line_height_count += draw.textsize(contributor, font=font)[1]
    contributors.append(contributor)
    pos+= 1
    if contributor_line_height_count + draw.textsize(contributor, font=font)[1] > imgHeight * contributor_p:
	print("You have reached the contributor limit.")
	num_contributors = pos

# GET FILE PATH
path = raw_input('Enter path for new image: \n')
while not os.path.exists(path):
    path = raw_input('Enter path for new image: \n')

# GET FILE NAME
name = raw_input('Enter name for new image: \n')
path_with_name = path + "/" + name + ".jpg"

# Compile description and contributors height
total_height = contributor_line_height_count + description_line_height_count + padding

# Where to start drawing, lateral cursor
diff = imgHeight - total_height - margin - margin
if diff > 0:
    current_height = margin + diff / 2
else:
    current_height = margin

# How many pixels are in a space between words
offset =  draw.textsize(" ", font=font)[0]

# DRAW TEXTWRAPPED DESCRIPTION
font_size = imgHeight // (10 + 1/3)
for line in textwrap.wrap(description, width = imgWidth):
    # Get width and height of line
    w, h = draw.textsize(line, font=font)
    # Starting point for word, horizontal cursor
    cursor = margin
    for word in line.split():
	# If the next word overlaps the border, move to next line
	if (cursor + (draw.textsize(word, font=font)[0]) + offset + right_margin)  >= imgWidth:
	    current_height += h
	    cursor = margin
    	draw.text((cursor, current_height), word, font=font)
	# Move lateral cursor past word
	cursor += (draw.textsize(word, font=font)[0]) + offset
    # Move vertical cursor down a line
    current_height += h

# Space between description and contributors
current_height += padding

# Smaller font for contributors
font_size = imgHeight / 16
font = ImageFont.truetype(font_file, font_size)

# DRAW TEXTWRAPPED CONTRIBUTORS
for line in contributors:
    # Get width and height of line
    w, h = draw.textsize(line, font=font)
    # Starting point for word, horizontal cursor
    cursor = margin
    for word in line.split():
	# If the next word overlaps the page, move to next line
	if (cursor + (draw.textsize(word, font=font)[0]) + offset + right_margin)  >= imgWidth:
	    current_height += h
	    cursor = margin
    	draw.text((cursor, current_height), word, font=font)
	# Move lateral cursor past word
	cursor += (draw.textsize(word, font=font)[0]) + offset
    # Move vertical cursor down a line
    current_height += h

# CHECK IF FILE EXISTS
if os.path.isfile(path_with_name):
    choice = raw_input('Are you sure you want to overwrite this file? (y/n):\n')
    choice = choice.lower()
    while not choice == "y" and not choice == "n":
	choice = raw_input('Are you sure you want to overwrite this file? (y/n):\n')
	choice = choice.lower()
    while choice == "n":
	path = raw_input('Enter path for new image:\n')
	while not os.path.exists(path):
    	    path = raw_input('Enter path for new image: \n')
	name = raw_input('Enter name for new image: \n')
	path_with_name = path + "/" + name + ".jpg"
	if os.path.isfile(path_with_name):
    	    choice = raw_input('Are you sure you want to overwrite this file? (y/n):\n')
    	    choice = choice.lower()
    	    while not choice == "y" and not choice == "n":
		choice = raw_input('Are you sure you want to overwrite this file? (y/n):\n')
		choice = choice.lower()

# SAVE IMAGE
# no error checking
img.save(path_with_name)
print("Your image has been saved.")
